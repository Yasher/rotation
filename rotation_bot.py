import time
import telebot
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
import db
import config
import voting

bot = telebot.TeleBot(config.config['token'], parse_mode='HTML')

shifts = db.get_shifts() # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [(id_—Å–º–µ–Ω—ã, –∏–º—è_—Å–º–µ–Ω—ã, tg_id), (x,x,x) (y,y,y)]

choice = []

count_shifts = {} # —Å–ª–æ–≤–∞—Ä—å key - tg_id, value - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω

text_button = "–í—ã–±–µ—Ä–∏ —Å–º–µ–Ω—ã üôà:"

hello = 0

def make_markup(tg_id):
    markup = types.InlineKeyboardMarkup()
    for i in shifts:
        if i[2] == str(tg_id):
            # markup.add(types.InlineKeyboardButton(i[1], callback_data=str(i[0])+", '"+str(i[1])+"'"))
            markup.add(types.InlineKeyboardButton(i[1], callback_data=i[0])) #callback_data - id_—Å–º–µ–Ω—ã
    return markup

def delete_userdata_from_shifts(tg_id):
    global shifts
    i = 0
    while True:
        try:
            if str(tg_id) in shifts[i]:
                shifts.remove(shifts[i])
            else:
                i += 1
        except Exception as error:
            print(error)
            break

def add_userdata_to_shifts(tg_id):
    usershifts = db.get_shifts(tg_id)
    global shifts
    shifts.extend(usershifts)

def delete_userdata_from_choice(tg_id):

    global choice
    i = 0
    while True:
        try:
            if str(tg_id) in choice[i]:
                choice.remove(choice[i])
            else:
                i += 1
        except Exception as error:
            print(error)
            break

@bot.message_handler(commands=['start'])
def start(message):
    global tg_id
    tg_id = message.from_user.id

    if db.get_person_id_from_tg_id(tg_id) == 0:
        bot.send_message(chat_id=message.chat.id, text="–ê –∫a–∑–∞—á–æ–∫-—Ç–æ –∑–∞—Å–ª–∞–Ω–Ω—ã–π!!!")
    else:
#–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        rkm = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        if db.is_user_admin(tg_id) == True:
            rkm.add(types.KeyboardButton("/start"), types.KeyboardButton("–í—ã–±–æ—Ä —Å–º–µ–Ω"), types.KeyboardButton("–ü–µ—Ä–∏–æ–¥"), types.KeyboardButton("–†–µ–∑—É–ª—å—Ç–∞—Ç"),
                    types.KeyboardButton("–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"), types.KeyboardButton("–ü–æ–¥–º–µ–Ω–∞"), types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è"), types.KeyboardButton("–Ø –ø—Ä–æ–∂–∞–ª—Å—è"))

            global hello
            if hello == 0:
                msg = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!", reply_markup=rkm)
                msg = bot.send_message(message.chat.id, "–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                hello = 1
            # a=1
            bot.register_next_step_handler(msg, user_handler)
            # user_handler(msg)
        else:
            rkm.add(types.KeyboardButton("/start"), types.KeyboardButton("–í—ã–±–æ—Ä —Å–º–µ–Ω"), types.KeyboardButton("–†–µ–∑—É–ª—å—Ç–∞—Ç"), types.KeyboardButton("–Ø –ø—Ä–æ–∂–∞–ª—Å—è"))
            msg = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç " + db.get_person_fio_from_tg_id(tg_id)[0], reply_markup=rkm)
            bot.register_next_step_handler(msg, user_handler)


# @bot.message_handler(commands=['start']) #—Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
def user_handler (message):
    msg = message
    if (message.text == "–ü–µ—Ä–∏–æ–¥"):
        period_text = db.get_current_period("normal")
        msg = bot.send_message(message.chat.id, "–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: " + period_text)
        markup = make_inline_markup_ifnotshifts("period")
        msg = bot.send_message(message.chat.id, "–û–±–Ω–æ–≤–∏—Ç—å?", reply_markup = markup)
    elif (message.text == "–í—ã–±–æ—Ä—ã"):
        if db.check_shifts_persons_count() == False:
            bot.send_message(chat_id=message.chat.id, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ != –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–º–µ–Ω!!!!!")
        else:
        ### –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–∞ –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ vote, –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–∞, —Ç–æ —Å–æ–æ–±—â–∏—Ç—å (—Å–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å)
            if db.check_table_is_empty("vote") == True:
                voting.voting()
                msg = bot.send_message(message.chat.id, "–í—ã–±–æ—Ä—ã –ø—Ä–æ–≤–µ–¥–µ–Ω—ã!")
                #bot.register_next_step_handler(msg, user_handler)
                user_handler(msg)
            else:
                msg = bot.send_message(message.chat.id, "–¢–∞–±–ª–∏—Ü–∞ –≤—ã–±–æ—Ä–æ–≤ –Ω–µ –ø—É—Å—Ç–∞.")
                markup = make_inline_markup_ifnotshifts("vote")
                msg = bot.send_message(message.chat.id, "–û–±–Ω–æ–≤–∏—Ç—å?", reply_markup=markup)

    elif (message.text == "–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
        ###–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤ history —É–∂–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
        if db.check_current_vote_in_history() == False:
            db.insert_voting_results_into_history()
            msg = bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!!")
            #bot.register_next_step_handler(msg, user_handler)
        else:
            markup = make_inline_markup_ifnotshifts("results")
            msg = bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ!", reply_markup=markup)   #### –°–¥–µ–ª–∞—å–± –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç
            #bot.register_next_step_handler(msg, user_handler)
    elif (message.text == "–ü–æ–¥–º–µ–Ω–∞"):
        print("–ü–æ–¥–º–µ–Ω–∞")
        msg = bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ü§∑‚Äç‚ôÇÔ∏è ")
        #bot.register_next_step_handler(msg, user_handler)
    elif (message.text == "–í—ã–±–æ—Ä —Å–º–µ–Ω"):
        if db.check_shifts_persons_count() == False:
            bot.send_message(chat_id=message.chat.id, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ != –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–º–µ–Ω!!!!!")
        else:
            #global tg_id
            db.delete_user_from_current(message.from_user.id)
            delete_userdata_from_shifts(message.from_user.id)
            add_userdata_to_shifts(message.from_user.id)
            delete_userdata_from_choice(message.from_user.id)
            get_count(message.from_user.id)
            msg1 = bot.send_message(message.chat.id, text_button.format(message.from_user), reply_markup=make_markup(message.from_user.id))
    elif (message.text == "–ò—Å—Ç–æ—Ä–∏—è"):
        msgtext = make_msgtext_history()
        bot.send_message(message.chat.id, msgtext)
        markup = make_inline_markup_ifnotshifts("history")
        msg = bot.send_message(message.chat.id, "–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É?", reply_markup=markup)
    elif (message.text == "–†–µ–∑—É–ª—å—Ç–∞—Ç"):
        if db.check_shifts_persons_count() == False:
            bot.send_message(chat_id=message.chat.id, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ != –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–º–µ–Ω!!!!!")
        else:
            voting.voting()

            msgtext = make_msgtext_results()
            bot.send_message(message.chat.id, msgtext)
            markup = make_inline_markup_ifnotshifts("scheme")
            msg = bot.send_message(message.chat.id, "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ö–µ–º—É –≤—ã–¥–∞—á–∏ —Å–º–µ–Ω?", reply_markup=markup)

        #bot.send_message(db.get_admin_tg_id(), "–ü—Ä–∏–≤–µ—Ç –æ—Ç –±–æ—Ç–∞")

    elif (message.text == "–Ø –ø—Ä–æ–∂–∞–ª—Å—è"):
        tg_id = msg.from_user.id
        db.enter_data_by_user(tg_id)
        bot.send_message(message.chat.id, "–ú–æ–ª–æ–¥–µ—Ü!")
        if all_entered_data():
            if db.check_settings_admin_msg() == False:
                bot.send_message(db.get_admin_tg_id(), make_msgtext_results())
                db.set_admin_msg(True)


        if db.is_user_admin(tg_id) == True:
            list_entered_print = ""
            list_not_entered_print = ""
            messagetext = ""
            num = 0
            list_entered = db.get_users_entered_data(True)
            for person in list_entered:
                list_entered_print += person[0] + "\n"
                num += 1
            list_not_entered = db.get_users_entered_data(False)
            for person in list_not_entered:
                list_not_entered_print += person[0] + "\n"
            num_p = db.get_person_count(False)
            if  num_p == num:
                notif = "–ü—Ä–æ–∂–∞—Ç—ã –í–°–ï: \n"
                messagetext = notif + list_entered_print
            else:
                notif = "–ü—Ä–æ–∂–∞—Ç—ã –ù–ï –≤—Å–µ: \n"
                messagetext = notif + list_entered_print + "\n\n –û—Å—Ç–∞–ª–∏—Å—å: \n" + list_not_entered_print



            bot.send_message(message.chat.id, messagetext)
    bot.register_next_step_handler(msg, user_handler)



def make_msgtext_results():
    msgtext = ""
    result = db.get_voting_table()
    for l in result:
        msgtext += l[0] + "\t\t\t\t\t\t" + l[1] + "\n"

    #num = db.get_person_count(True)
    #num_p = db.get_person_count(False)
    if all_entered_data():
        msgtext = "<b>–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ </b> –Ω–∞ –ø–µ—Ä–∏–æ–¥ " + str(db.get_current_period("normal_print")) + ": \n" + msgtext

    else:
        msgtext = "<b>–ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ </b>–Ω–∞ –ø–µ—Ä–∏–æ–¥ " + str(db.get_current_period("normal_print")) + ": \n" + msgtext

    return msgtext

def all_entered_data():
    num = db.get_person_count(True)
    num_p = db.get_person_count(False)
    if num_p == num:
        return True
    else:
        return False


def make_msgtext_history(id = 0):
    msgtext = ""
    period_text = db.get_current_period("curr_period_base")
    #period1 = db.get_current_period("curr_period_base")
    #period2 = db.get_current_period("curr_period+1_base")
    result = db.get_history(id)
    num=1
    for l in result:
        #msgtext += str(num) + ". " + l[0] + "\t" + l[1] + "\t" + l[2] + "\n"
        msgtext += str(l[0]) + "\t" + l[1] + "\t" + l[2] + "\t" + l[3] + "\n"
        num+=1
    #num = db.get_person_count(True)
    #num_p = db.get_person_count(False)
    if id == 0:
        msgtext = "<b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ " + period_text +":</b>\n" + msgtext
    else:
        msgtext = "–£–¥–∞–ª—è–µ–º? " + msgtext

    return msgtext

def all_entered_data():
    num = db.get_person_count(True)
    num_p = db.get_person_count(False)
    if num_p == num:
        return True
    else:
        return False

def make_inline_markup_ifnotshifts(part):
    markup = types.InlineKeyboardMarkup()
    if part != "results":
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="yes_" + str(part)))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data= "no_" + str(part)))
    elif part == "results":
        markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="del_" + str(part)))
    return markup

def year_input(message):
    global year
    year = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü XX")
    bot.register_next_step_handler(msg, month_input)


def month_input (message):
    global month
    month = message.text
    db.update_period(year, month)
    msg = bot.send_message(message.chat.id, "–ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: " + str(month) + "." + str(year))
    db.clear_entered_data_in_person()
    db.set_admin_msg(False)

def del_str_history (message):
    msgtext = make_msgtext_history(message.text)
    global history_id
    history_id = message.text
    markup = make_inline_markup_ifnotshifts("history_del")
    bot.send_message(message.chat.id, msgtext, reply_markup=markup)

def get_count (tg_id):
    count = 0
    for i in shifts:
        if i[2] == str(tg_id):
            count = count + 1
    # count_shifts.append([tg_id, count])
    try:
        del count_shifts[tg_id]
    except:
        ""
    count_shifts[tg_id] = count
    print("count_shifts")
    print(count_shifts)

def send_scheme_tg (chat_id):
    with open("scheme.txt", "r") as file:
        bot.send_document(chat_id, file, visible_file_name="scheme.txt")

@bot.callback_query_handler(func=lambda call: True)   ### –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã:
def callback_worker(call):

    if call.data == "yes_period":
        print("yes_period")
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ XXXX")
        bot.register_next_step_handler(msg, year_input)
    elif call.data == "no_period":
        print("no_period")
        msg = bot.send_message(call.message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
    elif call.data == "yes_history":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        bot.register_next_step_handler(msg, del_str_history)
    elif call.data == "no_history":
        msg = bot.send_message(call.message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
    elif call.data == "yes_history_del":
        db.del_str_history(history_id)
        msg = bot.send_message(call.message.chat.id, "–°—Ç—Ä–æ–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã")
    elif call.data == "no_history_del":
        msg = bot.send_message(call.message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
    elif call.data == "yes_vote":
        voting.voting()
        msg = bot.send_message(call.message.chat.id, "–í—ã–±–æ—Ä—ã –ø—Ä–æ–≤–µ–¥–µ–Ω—ã!")
    elif call.data == "no_vote":
        msg = bot.send_message(call.message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
    elif call.data == "del_results":
        db.del_results_from_history()
        msg = bot.send_message(call.message.chat.id, "–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
    elif call.data == "yes_scheme":
        send_scheme_tg(call.message.chat.id)
        #msg = bot.send_message(call.message.chat.id, "–©–∞")
        #db.del_str_history(history_id)
        #msg = bot.send_message(call.message.chat.id, "–°—Ç—Ä–æ–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã")
    elif call.data == "no_scheme":
        msg = bot.send_message(call.message.chat.id, "–ü–æ–Ω—è–ª –ü—Ä–∏–Ω—è–ª")
    else:
        tg_id = call.from_user.id
        text_button1=""
        text_button2=""
        # for item in shifts:         # –æ–±—Ö–æ–¥–∏–º –≤—Å–µ —Å–º–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        i=0
        while True:
            try:
                if (str(shifts[i][0]) == call.data) and (shifts[i][2] == str(tg_id)): #–µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à —Å–º–µ–Ω –≤—Å—Ç—Ä–µ—á–∞–µ–º —Å–º–µ–Ω—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞ —ç—Ç–æ–π —Å–º–µ–Ω—ã –Ω–∞–∂–∞—Ç–∞
                    #choice_str = [item[0], str(tg_id)]
                    global choice
                    choice.append((shifts[i][0], str(tg_id))) # –ø–∏—à–µ–º –≤ —Å–ø–∏—Å–æ–∫ [id_—Å–º–µ–Ω—ã, tg_id]
                    shifts.remove(shifts[i]) #—É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à —Å–º–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–º–µ–Ω—É
                    count_shifts[tg_id]-=1  #  —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                    print(count_shifts)
                    if count_shifts[tg_id] == 0: # –µ—Å–ª–∏ –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
                        #msg = bot.send_message(chat_id=call.message.chat.id, text="–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö...")
                        text_button1 = "–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö..."
                        msg2 = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text_button1)
                        db.insert_choice(choice, tg_id)
                        time.sleep(0.5)
                        text_button1 = "–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É!!!"
                        msg3 = bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg2.message_id, text=text_button1)


                        chosen = db.get_chosen_shift(tg_id)
                        message_chosen=""
                        n_ch = 1
                        for sh in chosen:
                            print(sh[1])
                            message_chosen += str(n_ch) + ". " + sh[1] + "\n"
                            n_ch += 1
                        msg5 = bot.send_message(chat_id=call.message.chat.id, text=message_chosen)
                        # global choice
                        #msg6 = bot.send_message(chat_id=call.message.chat.id, text="–≠—Ç–æ –≤–∞—à –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä?", reply_markup=make_inline_markup_ifnotshifts("final_choice"))
                        bot.send_message(chat_id=call.message.chat.id, text="–ù–∞–∂–º–∏ \"–Ø –ø—Ä–æ–∂–∞–ª—Å—è\", –µ—Å–ª–∏ —ç—Ç–æ —Ç–≤–æ–π –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.")
                else:
                    i += 1
            except Exception as error:
                print(error)
                break
                # while True:
                #     try:
                #         if str(tg_id) in choice[i]:
                #             choice.remove(choice[i])
                #         else:
                #             i += 1
                #     except Exception as error:
                #         print(error)
                #         break



    #            print(choice)
                # if bool(shifts) != True:
                #     db.insert_choice(choice, tg_id)

                    # print("shifts 0 - " + str(len(shifts)))
             #   print("y")
            #else:
             #   print("n")
        #print(shifts)

        # print("sss = " + str(sss))
        # print(tg_id)

        if text_button1 == "–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É!!!":
            text_button2 = "–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É!!!"
        else:
            text_button2 = text_button

        msg4 = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text=text_button2, reply_markup=make_markup(tg_id))


while True:
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout = 5)
    except RequestException as err:
        print(err)
        print('* Connection failed, waiting to reconnect...')
        time.sleep(15)
        print('* Reconnecting.')
#bot.polling(none_stop=True)
